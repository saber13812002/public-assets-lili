let imageSelected={};class PhotoSelector{constructor(o={}){let e=this.generateID(),t=Object.assign({id:e,type:"base64",url:null,base64:null,aspectRatio:3/4,upload:!1,accept:[".png",".jpg",".webp"],onInit:function(){},onSelect:function(){},onChange:function(){},onReadFile:function(){},onDoneCrop:function(){},onCrop:function(){},onCropZoom:function(){},onCancel:function(){},onCropDistory:function(){},onUploadSuccess:function(o){},onUploadError:function(o,e){}},o);this.id=t.id,this.options=t,this.inputFile=$(`<input type="file" id="${e}">`),this.cropFrame=null,this.blob=null,this.base64=t.base64,this.url=t.url,this.temp=null,this.uploading=!1,this.init()}init(){let o=this;this.options.onInit(this),imageSelected[this.id]=this,this.inputFile.attr("accept",this.options.accept.join(",")),this.inputFile.on("change",(function(){if(this.files&&this.files[0]){var e=new FileReader;e.readAsDataURL(this.files[0]),e.onload=function(e){o.base64=e.target.result,o.options.onReadFile(o),o.crop()}}o.options.onChange(o)}))}changeID(o,e){imageSelected[o]=this,delete imageSelected[e]}chooseFile(){this.options.onSelect(),this.inputFile.click()}crop(){let self=this;const uploadButton=$('<button type="button" class="btn btn-primary upload">Upload</button>'),cancelButton=$('<button type="button" class="btn cancel">Cancel</button>'),doneButton=$('<button type="button" class="btn btn-primary done">Done</button>'),loading=$('<div class="crop-loading"><div class="loader-mini"></div><div class="progress-bar"><div class="progress-percent"><span>0</span>%</div><div class="progress-track"><div class="progress-track-processed"></div></div></div></div>');this.cropFrame=$(`<div class="crop-frame">\n                <div class="overlay"></div>\n                <div class="crop-content">\n                    <div class="crop-header">Crop your photo:</div>\n                    <div class="crop-inner-content">\n                        <img src="${"url"===this.options.type?this.url:this.base64}" style="max-height:200px;">\n                    </div>\n                    <div class="crop-footer">\n                        <div class="crop-zoom-level">\n                            <div class="crop-zoom-label">Zoom</div>\n                            <div class="crop-zoom-progress">\n                                <input type="range" min="0" max="100" value="0">\n                            </div>\n                        </div>\n                        <div class="crop-actions"></div>\n                    </div>\n                </div>\n            </div>`),!1!==this.options.upload?this.cropFrame.find(".crop-footer .crop-actions").append([cancelButton,uploadButton]):this.cropFrame.find(".crop-footer .crop-actions").append([doneButton]);let image=this.cropFrame.find("img");image.on("load",(function(){let ratioBase=self.options.aspectRatio;if("boolean"==typeof ratioBase&&(ratioBase=ratioBase?null:3/4),image.cropper({movable:!0,dragMode:"move",zoomOnWheel:!1,aspectRatio:ratioBase,minContainerWidth:self.cropFrame.find(".crop-inner-content").width(),minContainerHeight:360,viewMode:2,cropend:function(o){let e=image.cropper("getCroppedCanvas").toDataURL();self.temp=e,self.options.onCrop(self)},ready:function(){let o=image.cropper("getCroppedCanvas").toDataURL();self.options.base64=o,self.base64=o,self.temp=o}}),"string"==typeof self.options.aspectRatio){let ratios=self.options.aspectRatio.split(",");if(1===ratios.length&&image.cropper("setAspectRatio",eval(ratios[0])),ratios.length>1){self.cropFrame.find(".crop-footer").prepend('<div class="crop-ratios">\n                        <div class="crop-ratios-label">Ratios:</div>\n                        <div class="crop-ratios-items"></div>\n                    </div>'),image.cropper("setAspectRatio",eval(ratios[0]));for(let i=0;i<ratios.length;i++){let btnRatio=$(`<button type="button">${ratios[i].replace("/","x").toUpperCase()}</button>`);self.cropFrame.find(".crop-ratios-items").append(btnRatio),btnRatio.on("click",(function(){self.cropFrame.find(".crop-ratios-items button").removeClass("active"),$(this).addClass("active"),"free"===ratios[i].toLowerCase()?image.cropper("setAspectRatio",[]):image.cropper("setAspectRatio",eval(ratios[i])),self.temp=image.cropper("getCroppedCanvas").toDataURL()}))}self.cropFrame.find(".crop-ratios-items button:nth-child(1)").addClass("active")}}})),doneButton.on("click",(function(){self.temp&&(self.options.base64=self.temp,self.base64=self.temp,self.blob=self.dataURItoBlob(self.temp),self.temp=null),self.options.onDoneCrop(self),self.cropDistory()})),uploadButton.on("click",(function(){self.uploading=!0,self.cropFrame.find(".crop-content").append(loading),loading.show(),self.temp&&(self.options.base64=self.temp,self.base64=self.temp,self.blob=self.dataURItoBlob(self.temp),self.temp=null);const o=new FormData;o.append("file",self.blob),$.ajax({url:self.options.upload,type:"POST",data:o,processData:!1,contentType:!1,xhr:function(){var o=$.ajaxSettings.xhr();return o.upload&&o.upload.addEventListener("progress",(function(o){if(o.lengthComputable){var e=o.loaded/o.total*100;loading.find(".progress-percent span").html(e.toFixed(0)),loading.find(".progress-track-processed").width(e+"%")}}),!1),o},success:function(o){self.changeID(o.id,self.id),self.id=o.id,self.url=o.url,self.options.type="url",self.options.base64=null,self.options.id=o.id,self.options.url=o.url,self.base64=null,self.blob=null,self.uploading=!1,loading.remove(),self.options.onUploadSuccess(self),self.cropDistory()},error:function(o){loading.hide(),self.options.onUploadError(self,o),alert("Something went wrong, please check your internet connection and try again")}})})),cancelButton.on("click",(function(){self.cropDistory()})),this.cropFrame.find(".crop-zoom-progress input").on("input",(function(){image.cropper("zoomTo",$(this).val()/10),self.options.onCropZoom(self)})),this.cropFrame.find(".overlay").on("click",(function(){self.cropDistory(),self.options.onCancel(self)}));var cropper=image.data("cropper");$("body").append(this.cropFrame),bodyOverflowController(!0)}cropDistory(){this.uploading||(this.cropFrame.remove(),this.options.onCropDistory(this),bodyOverflowController())}generateID(){let o=new Uint32Array(3);return window.crypto.getRandomValues(o),(performance.now().toString(36)+Array.from(o).map((o=>o.toString(36))).join("")).replace(/\./g,"")}dataURItoBlob(o){const e=atob(o.split(",")[1]),t=[];for(let o=0;o<e.length;o++)t.push(e.charCodeAt(o));return new Blob([new Uint8Array(t)],{type:"image/png"})}}