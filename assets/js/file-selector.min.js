class FileSelector{constructor(t={}){this.options=Object.assign({files:null,ratio:["3/4"],limitSize:10,multiple:!1,wizard:!1,tags:!1,title:!1,description:!1,upload:!1,uploadUrl:null,data:{},accept:["*"],onUpload:function(t,i,e){},onDone:function(t,i){}},t),this.input=$(`<input type="file" accept="${this.options.accept.join(", ")}" ${this.options.multiple?"multiple":""}>`),this.file=null,this.url=null,this.format=null,this.base64=null,this.uploading=!1,this.view=null,this.initial()}initial(){const t=this;if(null===this.options.files)return this.input.trigger("click"),void this.input.on("change",(function(i){if("*"!==t.options.accept[0]){const i=this.files[0].name.match(/\.([a-zA-Z0-9]+)$/);if(!t.options.accept.includes(i[0]))return void t.alertPopUp("danger","The file format is not valid")}this.files[0].size>1024*t.options.limitSize*1024?t.alertPopUp("danger",`The maximum allowed size is ${t.options.limitSize}MB`):(t.file=this.files[0],t.url=URL.createObjectURL(t.file),t.format=t.getFormatFile(t.file.name),t.viewElement())}));if("*"!==t.options.accept[0]){const i=this.options.files[0].name.match(/\.([a-zA-Z0-9]+)$/);if(!t.options.accept.includes(i[0]))return void t.alertPopUp("danger","The file format is not valid")}this.options.files[0].size>1024*t.options.limitSize*1024?t.alertPopUp("danger",`The maximum allowed size is ${t.options.limitSize}MB`):(this.file=this.options.files[0],t.url=URL.createObjectURL(t.file),t.format=t.getFormatFile(t.file.name),t.viewElement())}destroy(){this.uploading||null===this.view||(this.view.find(".audio-card").trigger("destroy"),URL.revokeObjectURL(this.url),this.view.remove(),bodyOverflowController())}viewElement(){const t=this,i=$('<div class="file-selector"><div class="overlay"></div><div class="selector-frame"></div></div>'),e=$('<div class="frame-header">Preview</div>'),a=$('<div class="frame-content"></div>'),n=$('<div class="frame-footer"></div>'),o=$('<button type="button" class="btn cancel">Cancel</button>'),s=$('<button type="button" class="btn back">Back</button>'),r=$('<button type="button" class="btn btn-primary next">Next</button>'),l=$('<button type="button" class="btn btn-primary upload">Upload</button>'),d=$('<button type="button" class="btn btn-primary done">Done</button>');["png","jpg","jpeg","webp","svg"].includes(this.format)?a.append(this.cropElement()):["mp4","webm"].includes(this.format)?a.append(this.videoElement()):["mp3"].includes(this.format)?a.append(this.audioElement()):a.append(this.fileElement()),this.options.wizard&&a.append(this.wizardElement()),n.append(o),this.options.wizard&&(n.append([s,r]),s.hide(),l.hide(),d.hide()),this.options.upload?n.append(l):n.append(d),i.on("click",".overlay, .frame-footer .cancel",(function(){t.destroy()})),r.on("click",(function(){a.find(".frame-wizard").show(),a.find(".frame-preview").hide(),e.html("Information"),o.hide(),r.hide(),l.show(),d.show(),s.show()})),s.on("click",(function(){a.find(".frame-wizard").hide(),a.find(".frame-preview").show(),e.html("Preview"),l.hide(),d.hide(),s.hide(),o.show(),r.show()}));const p=function(e){if(t.view.find('.selector-frame input[name="title"]').length>0&&""===t.view.find('.selector-frame input[name="title"]').val().trim())return void t.alertPopUp("danger","The title cannot be empty");if($(this).hasClass("done"))return t.options.onDone(null!==t.base64?t.dataURItoBlob(t.base64):t.file,t.getWizardFormData()),void t.destroy();let a=new FormData;a.append("file",null!==t.base64?t.dataURItoBlob(t.base64):t.file),a.append("data",t.getWizardFormData()),t.uploading=!0,l.blur(),d.blur(),i.find(".selector-frame").append('<div class="frame-loading"><div class="loader-mini"></div><div class="progress-bar"><div class="progress-percent"><span>0</span>%</div><div class="progress-track"><div class="progress-track-processed"></div></div></div> </div>'),$.ajax({url:t.options.uploadUrl,type:"POST",data:a,processData:!1,contentType:!1,xhr:function(){var t=$.ajaxSettings.xhr();return t.upload&&t.upload.addEventListener("progress",(function(t){if(t.lengthComputable){var e=t.loaded/t.total*100;i.find(".frame-loading .progress-percent span").html(e.toFixed(0)),i.find(".frame-loading .progress-track-processed").width(e+"%")}}),!1),t},success:function(e){t.uploading=!1,t.options.onUpload(e,null!==t.base64?t.dataURItoBlob(t.base64):t.file,t.getWizardFormData()),i.find(".frame-loading").remove(),t.destroy()},error:function(e){t.uploading=!1,t.alertPopUp("danger","There is a problem in sending information. Please check your internet connection and try again."),i.find(".frame-loading").remove()}})};l.on("click",p),d.on("click",p),i.find(".selector-frame").append([e,a,n]),$("body").append(i),bodyOverflowController(!0),this.view=i,initAudioCard()}cropElement(){let self=this;const framePreview=$(`<div class="frame-preview">\n                <div class="crop-wrapper"><img src="${this.url}" style="max-height:200px;"></div><div class="ratio-wrapper"></div>\n                <div class="crop-zoom-level"><div class="crop-zoom-label">Zoom</div><div class="crop-zoom-progress"><input type="range" step="1" min="0" max="100" value="0"></div></div>\n            </div>`);let image=framePreview.find(".crop-wrapper img");return image.on("load",(function(){if(image.cropper({movable:!0,dragMode:"move",zoomOnWheel:!1,aspectRatio:self.options.ratio.length>0?eval(self.options.ratio[0]):[],minContainerWidth:framePreview.find(".crop-wrapper").width(),minContainerHeight:360,viewMode:2,cropend:function(t){self.base64=image.cropper("getCroppedCanvas").toDataURL()},ready:function(){self.base64=image.cropper("getCroppedCanvas").toDataURL()}}),framePreview.find(".crop-zoom-progress input").on("input",(function(){image.cropper("zoomTo",parseFloat($(this).val())/10)})),self.options.ratio.length>1){const ratios=$('<div class="crop-ratios"><div class="crop-ratios-label">Ratios:</div><div class="crop-ratios-items"></div></div>');for(let i=0;i<self.options.ratio.length;i++){let btnRatio=$(`<button type="button">${self.options.ratio[i].replace("/","x").toUpperCase()}</button>`);ratios.find(".crop-ratios-items").append(btnRatio),btnRatio.on("click",(function(){ratios.find("button").removeClass("active"),$(this).addClass("active"),"free"===self.options.ratio[i].toLowerCase()?image.cropper("setAspectRatio",[]):image.cropper("setAspectRatio",eval(self.options.ratio[i])),self.base64=image.cropper("getCroppedCanvas").toDataURL()}))}ratios.find("button:nth-child(1)").addClass("active"),framePreview.find(".ratio-wrapper").append(ratios)}})),framePreview}videoElement(){return $(`<div class="frame-preview"><video autoplay loop controls><source src="${this.url}" type="video/mp4"></audio></div>`)}audioElement(){return $(`<div class="frame-preview">\n            <div class="audio-card" data-src="${this.url}">\n                <div class="card-content">\n                    <div class="card-title" itemprop="name">${this.file.name}</div>\n                    <div class="card-time">\n                        <meta itemprop="duration" content="T2M10S">\n                        <span class="current-time">00:00</span> / <span>00:00</span>\n                    </div>\n                </div>\n                <div class="card-controllers">\n                    <button class="btn btn-icon play-btn" aria-label="Play Voice"><i class="icon-play"></i></button>\n                    <button class="btn btn-icon pause-btn" aria-label="Pause Voice"><i class="icon-pause"></i></button>\n                    <div class="slider-control">\n                        <input type="range" min="0" max="100" value="0">\n                        <div class="slider-track"><div class="slider-track-process"></div><div class="slider-track-buffer"></div></div>\n                    </div>\n                    <div class="card-volume">\n                        <div class="card-volume-progress">\n                            <input type="range" min="0" max="1" step="0.01" value="1">\n                            <div class="slider-track"><div class="slider-track-process" style="width: 100%;"></div><div class="slider-track-buffer"></div></div>\n                        </div>\n                        <button class="btn btn-icon volume-mute-btn" aria-label="Pause Voice"><i class="icon-silence"></i></button>\n                        <button class="btn btn-icon volume-on-btn" aria-label="Pause Voice"><i class="icon-audio"></i></button>\n                    </div>\n                </div>\n                <div class="card-loading"><div class="loader-mini"></div></div>\n            </div>\n        </div>`)}fileElement(){return $(`<div class="frame-preview"><div class="other-file"><i class="icon-document"></i><div class="file-name">${this.file.name}</div></div></div>`)}wizardElement(){const t=$('<div class="frame-wizard" style="display: none;"></div>');return this.options.title&&t.append(this.wizardFieldTitle()),this.options.description&&t.append(this.wizardFieldDescription()),this.options.tags&&t.append(this.wizardFieldTags()),t}wizardFieldTitle(){const t=$('<label><span>Title:</span><input type="text" name="title" placeholder="Enter Title"></label>');return t.on("input change","input",(function(){""===$(this).val().trim()?$(this).parents("label").addClass("error"):$(this).parents("label").removeClass("error")})),t}wizardFieldDescription(){return $('<label><span>Description:</span><textarea name="description" placeholder="Enter Description" rows="3"></textarea></label>')}wizardFieldTags(){const t=this,i=$('<div class="tags-wrapper">\n            <div class="label">Tags:</div><div class="tags"></div>\n            <div class="tags-form"><input type="text" placeholder="Enter Tag"><button type="button" class="btn btn-primary">Add Tag</button></div>\n        </div>');let e=0;return i.on("keydown",".tags-form input",(function(t){13===t.keyCode&&i.find(".tags-form button").trigger("click")})),i.on("click",".tags-form button",(function(){const a=$(this),n=i.find(".tags-form input");if(""===n.val().trim())return void t.alertPopUp("danger","The tag value cannot be empty");if(void 0===a.attr("data-for")){let e=!1;if(i.find(".tags input").each((function(){$(this).val().trim().toLowerCase()!==n.val().trim().toLowerCase()||(e=$(this).val())})),!1!==e)return void t.alertPopUp("danger","The tag cannot be duplicated")}if(a.attr("data-for")){const t=i.find(`[name="${a.attr("data-for")}"]`);return t.val(n.val().trim()),t.parents(".item").find("span").html(n.val().trim()),n.val(""),a.removeAttr("data-for"),void a.html("Add Tag")}const o=$(`<div class="item">\n                <span>${n.val().trim()}</span><i class="icon-trash trash"></i><i class="icon-edit edit"></i>\n                <input type="hidden" name="tags[${e++}]" value="${n.val().trim()}"/>\n            </div>`);o.on("click",".trash",(function(){$(this).parents(".item").remove(),0===i.find(".tags .item").length&&i.find(".tags").hide()})),o.on("click",".edit",(function(){const t=$(this).parents(".item");n.val(t.find("input").val()),a.attr("data-for",t.find("input").attr("name")),a.html("Save Tag")})),n.val("").focus(),i.find(".tags").append(o).css("display","flex")})),i}getWizardFormData(){const t={};return this.view.find("input, textarea").each((function(){void 0!==$(this).attr("name")&&(t[$(this).attr("name")]=$(this).val())})),t}getFormatFile(t){const i=t.match(/\.([a-zA-Z0-9]+)$/);return i?i[1]:null}alertPopUp(t,i){let e=$('<button type="button" class="btn btn-full btn-primary">Ok</button>'),a=addAlertPopup({class:"",type:"icon",status:t,title:i,actionElements:[e],actionLayout:"horizontal"});e.on("click",(function(){a.distory()}))}dataURItoBlob(t){const i=atob(t.split(",")[1]),e=[];for(let t=0;t<i.length;t++)e.push(i.charCodeAt(t));return new Blob([new Uint8Array(e)],{type:"image/png"})}}